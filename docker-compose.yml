services:

  ## -----------------------------------------------------------------
  ## Use Redis streams for data access of micro-services in real-time.
  ## -----------------------------------------------------------------
  redis:
    image: "redis:7.2.4-alpine"
    command: >
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: unless-stopped

  ## -----------------------------------------------
  ## This micro-service retrieves weather forecasts.
  ## -----------------------------------------------
  weather-data-service:
    image: ait1/rdp-data-crawler:latest-dev
    volumes:
      - ./weather-data-service/config.yml:/etc/data_crawler/config.yml:ro
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      - redis
    restart: unless-stopped

  ## ----------------------------------------------------------
  ## Use TimescaleDB for permanent storage of time series data.
  ## ----------------------------------------------------------
  timescale:
    image: "timescale/timescaledb:latest-pg16"
    environment:
      POSTGRES_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      TIMESCALEDB_TELEMETRY: "off"
    volumes:
      - timescale-data:/var/lib/postgresql/data
    restart: unless-stopped

  ## ------------------------------------------------------------------------
  ## This micro-service defines the database schema used by the timescale DB.
  ## ------------------------------------------------------------------------
  db-scheme:
    image: ait1/rdp-database:latest-dev
    depends_on:
      - timescale
    environment:
      POSTGRES_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      POSTGRES_DATA_SOURCE_USER: ${POSTGRES_DATA_SOURCE_USER}
      POSTGRES_DATA_SOURCE_PASSWORD: ${POSTGRES_DATA_SOURCE_PASSWORD}
      POSTGRES_DATA_VIS_USER: ${POSTGRES_DATA_VIS_USER}
      POSTGRES_DATA_VIS_PASSWORD: ${POSTGRES_DATA_VIS_PASSWORD}
      POSTGRES_DATA_PUB_VIS_USER: ${POSTGRES_DATA_PUB_VIS_USER}
      POSTGRES_DATA_PUB_VIS_PASSWORD: ${POSTGRES_DATA_PUB_VIS_PASSWORD}
      RDP_POSTGRES_HOST: timescale

  ## ----------------------------------------------------------------------------------
  ## This micro-service stores selected data from the Redis stream to the TtimescaleDB.
  ## ----------------------------------------------------------------------------------
  data-sync-service:
    image: ait1/rdp-redsql:latest-dev
    environment:
      POSTGRES_USER: ${POSTGRES_DATA_SOURCE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DATA_SOURCE_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - ./data-sync-service/config.yml:/etc/redsql/config.yml:ro
    depends_on:
      redis:
        condition: service_started
      db-scheme:
        condition: service_completed_successfully
    restart: unless-stopped

  ## ----------------------------------------------------------
  ## Use grafana for visualization of data in the timescale DB.
  ## ----------------------------------------------------------
  grafana:
    image: grafana/grafana-oss:10.2.3
    environment:
      GF_SERVER_ROOT_URL: "https://%(domain)s:443/grafana"
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      POSTGRES_DATA_VIS_USER: ${POSTGRES_DATA_VIS_USER}
      POSTGRES_DATA_VIS_PASSWORD: ${POSTGRES_DATA_VIS_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      db-scheme:
        condition: service_completed_successfully
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=HostRegexp(`localhost`) && (Path(`/grafana`) || PathPrefix(`/grafana/`))"
      - "traefik.http.routers.grafana.service=service-grafana"
      - "traefik.http.services.service-grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.entrypoints=web,websecure"
      - "traefik.http.routers.grafana.tls=true"

  ## ------------------------------------------------------------------------------------
  ## This micro-service uses the latest forecast data for running a PV module simulation.
  ## ------------------------------------------------------------------------------------
  pv-sim-service:
    build: pv-sim-service
    volumes:
      - ./pv-sim-service/config.yml:/app/config.yml:ro
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      - weather-data-service
    restart: unless-stopped

  ## -----------------------------------------------
  ## This micro-service retrieves weather forecasts.
  ## -----------------------------------------------
  frequency-data-service:
    build: frequency-data-service
    volumes:
      - ./frequency-data-service/config.yml:/etc/data_crawler/config.yml:ro
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      - redis
    restart: unless-stopped

  ## --------------------------------------------------
  ## Use a reverse proxy to secure this RDP deployment.
  ## --------------------------------------------------
  reverse-proxy:
    image: traefik:v3.4
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certs:/etc/certs
      - /var/run/docker.sock:/var/run/docker.sock
    restart: on-failure
    command:
      - "--log.level=INFO"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.watch=true"
      - "--providers.file.directory=/etc/certs"

volumes:
  redis-data:
  timescale-data:
  grafana-data:
